![](/onlinejudge/image/banner.jpg)

Welcome to ZOJ

[Login](/onlinejudge/login.do) | [Register](/onlinejudge/register.do)

[Home](/onlinejudge/) | [Contests](/onlinejudge/showContests.do) |
[Problems](/onlinejudge/showProblemsets.do) | [Forum](/forum/) |
[Donation](/donation/)

![](/onlinejudge/image/arrow_sub2.gif)

[Problem Sets](/onlinejudge/showProblemsets.do)

[Information](/onlinejudge/problemsetInfo.do?contestId=1)

[Select Problem](/onlinejudge/showProblems.do?contestId=1)

[Runs](/onlinejudge/showRuns.do?contestId=1)

[Ranklist](/onlinejudge/showRankList.do?contestId=1&from=0&order=AC)

![](/onlinejudge/image/cpc_acm.jpg)

ZOJ Problem Set - 1949

Error Correction

* * *

Time Limit:  2 Seconds
&nbsp_place_holder;&nbsp_place_holder;&nbsp_place_holder;&nbsp_place_holder;
Memory Limit:  65536 KB

* * *

A boolean matrix has the parity property when each row and each column has an
even sum, i.e. contains an even number of bits which are set. Here's a 4 x 4
matrix which has the parity property:

1 0 1 0

0 0 0 0

1 1 1 1

0 1 0 1

The sums of the rows are 2, 0, 4 and 2. The sums of the columns are 2, 2, 2
and 2.

  
Your job is to write a program that reads in a matrix and checks if it has the
parity property. If not, your program should check if the parity property can
be established by changing only one bit. If this is not possible either, the
matrix should be classified as corrupt.

  
**Input**  
  
The input will contain one or more test cases. The first line of each test
case contains one integer n (n < 100), representing the size of the matrix. On
the next n lines, there will be n integers per line. No other integers than 0
and 1 will occur in the matrix. Input will be terminated by a value of 0 for
n.

  
**Output**  
  
For each matrix in the input file, print one line. If the matrix already has
the parity property, print "OK". If the parity property can be established by
changing one bit, print "Change bit (i,j)" where i is the row and j the column
of the bit to be changed. Otherwise, print "Corrupt".

  
**Sample Input**  
  
4

1 0 1 0

0 0 0 0

1 1 1 1

0 1 0 1

4

1 0 1 0

0 0 1 0

1 1 1 1

0 1 0 1

4

1 0 1 0

0 1 1 0

1 1 1 1

0 1 0 1

0

  
**Sample Output  
**  
OK

Change bit (2,3)

Corrupt

* * *

Source: **University of Ulm Local Contest 1998**

[Submit](/onlinejudge/submit.do?problemId=949)
&nbsp_place_holder;&nbsp_place_holder;
[Status](/onlinejudge/showProblemStatus.do?problemId=949)

* * *

Copyright @ 2001-2013, Zhejiang University ACM/ICPC Team, All rights reserved.

